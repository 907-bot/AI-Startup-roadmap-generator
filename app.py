# -*- coding: utf-8 -*-
"""startup-blueprint-rag.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HyANU9TphlpFDTR9Z_mHshPBcfMHvsto

# 🚀 Startup Blueprint Generator Agent with RAG
## Comprehensive AI-Powered Startup Planning Platform

This notebook implements a complete startup blueprint generation system using:
- **RAG (Retrieval-Augmented Generation)** with ChromaDB
- **Business Plan Generation**
- **Interactive Flashcards Creation**
- **Visual Roadmap Generation**
- **Streamlit UI** and **Gradio Hosting**

### Features:
- 📊 Market Research & Competitive Analysis
- 📋 Business Plan Synthesis
- 🎯 Legal & Financial Setup Guidance
- 👥 Team & Operations Planning
- 🎨 Brand & Marketing Strategy
- 🗓️ Dynamic Roadmap Creation
- 📚 Learning Flashcards System

## 📦 Installation & Setup
"""

# Install required packages
!pip install -q chromadb sentence-transformers streamlit gradio
!pip install -q langchain langchain-community langchain-openai
!pip install -q plotly pandas numpy scikit-learn
!pip install -q python-dotenv joblib pydantic
!pip install -q transformers torch

# Additional packages for enhanced functionality
!pip install -q beautifulsoup4 requests matplotlib seaborn
!pip install -q python-docx fpdf2

# Core imports
import os
import json
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
import warnings
warnings.filterwarnings('ignore')

# RAG and Vector Database
import chromadb
from sentence_transformers import SentenceTransformer
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.schema import Document

# ML and Model Persistence
import joblib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# UI and Visualization
import streamlit as st
import gradio as gr
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots

# Utilities
import re
import uuid
from dataclasses import dataclass
from pathlib import Path

"""## 🏗️ Data Models & Core Classes"""

@dataclass
class StartupIdea:
    """Data model for startup ideas"""
    name: str
    description: str
    industry: str
    target_market: str
    problem_statement: str
    solution: str
    unique_value_proposition: str

@dataclass
class BusinessPlan:
    """Comprehensive business plan structure"""
    executive_summary: str
    company_description: str
    market_analysis: str
    organization_management: str
    service_product_line: str
    marketing_sales: str
    funding_request: str
    financial_projections: Dict[str, Any]

@dataclass
class Flashcard:
    """Learning flashcard structure"""
    id: str
    front: str
    back: str
    category: str
    difficulty: str
    tags: List[str]

@dataclass
class RoadmapMilestone:
    """Roadmap milestone structure"""
    id: str
    title: str
    description: str
    timeline: str
    dependencies: List[str]
    priority: str
    category: str

"""## 🧠 RAG System Implementation"""

class RAGSystem:
    """
    Retrieval-Augmented Generation system using ChromaDB
    for startup knowledge base and context retrieval
    """

    def __init__(self, model_name: str = "all-MiniLM-L6-v2"):
        self.embedding_model = SentenceTransformer(model_name)
        self.chroma_client = chromadb.PersistentClient(path="./chroma_db")
        self.collection_name = "startup_knowledge"
        self.collection = None
        self.text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200,
            length_function=len
        )

    def initialize_collection(self):
        """Initialize or get existing collection"""
        try:
            self.collection = self.chroma_client.get_collection(self.collection_name)
        except:
            self.collection = self.chroma_client.create_collection(
                name=self.collection_name,
                metadata={"description": "Startup knowledge base"}
            )
        return self.collection

    def add_documents(self, documents: List[str], metadatas: List[Dict] = None):
        """Add documents to the knowledge base"""
        if not self.collection:
            self.initialize_collection()

        # Split documents into chunks
        all_chunks = []
        all_metadatas = []

        for i, doc in enumerate(documents):
            chunks = self.text_splitter.split_text(doc)
            all_chunks.extend(chunks)

            # Add metadata for each chunk
            doc_metadata = metadatas[i] if metadatas else {}
            for chunk in chunks:
                all_metadatas.append({
                    **doc_metadata,
                    "chunk_id": str(uuid.uuid4()),
                    "timestamp": datetime.now().isoformat()
                })

        # Generate embeddings
        embeddings = self.embedding_model.encode(all_chunks).tolist()

        # Add to collection
        ids = [str(uuid.uuid4()) for _ in all_chunks]
        self.collection.add(
            documents=all_chunks,
            embeddings=embeddings,
            metadatas=all_metadatas,
            ids=ids
        )

        return len(all_chunks)

    def retrieve_context(self, query: str, n_results: int = 5) -> List[Dict]:
        """Retrieve relevant context for a query"""
        if not self.collection:
            self.initialize_collection()

        # Generate query embedding
        query_embedding = self.embedding_model.encode([query]).tolist()[0]

        # Query the collection
        results = self.collection.query(
            query_embeddings=[query_embedding],
            n_results=n_results
        )

        # Format results
        contexts = []
        if results['documents'][0]:
            for i, doc in enumerate(results['documents'][0]):
                contexts.append({
                    "content": doc,
                    "metadata": results['metadatas'][0][i],
                    "distance": results['distances'][0][i]
                })

        return contexts

    def generate_response(self, query: str, context: List[Dict]) -> str:
        """Generate response using retrieved context"""
        # Combine context
        context_text = "\n".join([ctx["content"] for ctx in context])

        # Simple template-based generation (can be replaced with LLM)
        prompt = f"""
        Based on the following context, provide a comprehensive answer to the query:

        Context:
        {context_text}

        Query: {query}

        Answer:
        """

        # For now, return a structured response based on context
        # In production, this would call an LLM
        return self._generate_structured_response(query, context_text)

    def _generate_structured_response(self, query: str, context: str) -> str:
        """Generate structured response based on query type"""
        query_lower = query.lower()

        if "market research" in query_lower or "competition" in query_lower:
            return f"""
            Based on the available data:

            **Market Analysis:**
            {context[:500]}...

            **Key Recommendations:**
            - Conduct thorough competitive analysis
            - Identify unique value propositions
            - Analyze market size and growth potential
            """

        elif "business plan" in query_lower:
            return f"""
            **Business Plan Guidance:**
            {context[:500]}...

            **Essential Components:**
            - Executive Summary
            - Market Analysis
            - Financial Projections
            - Marketing Strategy
            """

        else:
            return f"""
            **Response:**
            {context[:500]}...

            **Additional Insights:**
            - Consider industry-specific factors
            - Validate assumptions with market data
            - Seek expert guidance when needed
            """

# Initialize RAG system
rag_system = RAGSystem()
rag_system.initialize_collection()

"""## 📚 Knowledge Base Population"""

# Startup knowledge base content
startup_knowledge_base = [
    """
    IDEA VALIDATION AND MARKET RESEARCH

    Before building any product, entrepreneurs must prove market demand exists. This involves:

    1. Problem Identification: Identify genuine problems that specific customer segments face. Many startups fail because they build products nobody wants.

    2. Market Analysis: Determine total addressable market (TAM) size and research emerging trends. This analysis proves market opportunity to investors.

    3. Competitive Research: Identify competitors, analyze their offerings, strengths, and weaknesses. Use this to define your unique selling proposition (USP).

    4. Customer Validation: Conduct interviews, surveys, and prototype testing with potential customers to validate assumptions.

    5. Market Sizing: Calculate TAM (Total Addressable Market), SAM (Serviceable Addressable Market), and SOM (Serviceable Obtainable Market).

    Key metrics to track: Customer acquisition cost (CAC), lifetime value (LTV), market penetration rate, and customer feedback scores.
    """,

    """
    BUSINESS PLAN DEVELOPMENT

    A comprehensive business plan serves as a roadmap for structuring, running, and growing your company:

    1. Executive Summary: Concise overview including mission, product, key objectives, and competitive advantages.

    2. Company Description: Detailed information on business model, legal structure, and customer value proposition.

    3. Market Analysis: Industry overview, target market analysis, competitive landscape, and market trends.

    4. Organization & Management: Legal structure, management team, key personnel, and advisory board.

    5. Service/Product Line: Detailed description of products/services, development stage, and intellectual property.

    6. Marketing & Sales: Customer acquisition strategy, pricing model, sales process, and marketing channels.

    7. Financial Projections: Revenue forecasts, expense budgets, cash flow projections, and break-even analysis.

    8. Funding Requirements: Capital needs, use of funds, and potential ROI for investors.
    """,

    """
    FUNDING AND FINANCIAL MANAGEMENT

    Securing and managing finances is critical for startup success:

    1. Bootstrapping: Using personal savings to fund the business. Most common first step for many startups.

    2. Friends and Family: Borrowing from or accepting investments from personal network.

    3. Angel Investors: High-net-worth individuals who invest their money, often providing valuable mentorship.

    4. Venture Capitalists: Firms investing pooled funds in high-growth startups in exchange for equity.

    5. Crowdfunding: Raising small amounts from large numbers of people online through platforms like Kickstarter.

    6. Loans and Grants: Seeking debt financing from banks or government grants.

    Financial Management Best Practices:
    - Separate business and personal finances
    - Implement robust accounting systems
    - Track key financial metrics (burn rate, runway, gross margins)
    - Maintain detailed financial records for investors and taxes
    """,

    """
    LEGAL STRUCTURE AND REGISTRATION

    Choosing the right legal structure impacts liability, taxes, and ability to raise capital:

    1. Business Structures:
       - Sole Proprietorship: Simplest form, personal liability for debts
       - Partnership: Shared ownership, shared liability
       - LLC: Limited liability protection, flexible tax options
       - Corporation: Strongest liability protection, can issue stock

    2. Registration Process:
       - Choose and register business name
       - Obtain Employer Identification Number (EIN)
       - Secure necessary licenses and permits
       - Register for state and local taxes

    3. Essential Legal Documents:
       - Articles of Incorporation/Organization
       - Founders' Agreement (ownership, IP rights, responsibilities)
       - Employee agreements and IP assignments
       - Terms of service and privacy policy

    4. Intellectual Property Protection:
       - Trademarks for brand names and logos
       - Patents for unique inventions
       - Copyrights for creative works
       - Trade secrets for proprietary processes
    """,

    """
    TEAM BUILDING AND OPERATIONS

    Building the right team is critical for startup success:

    1. Founding Team Composition:
       - Complementary skills (technical, business, domain expertise)
       - Diverse perspectives and backgrounds
       - Aligned vision and values
       - Commitment to long-term success

    2. Hiring Strategy:
       - Hire for adaptability and cultural fit
       - Focus on critical roles first (technical, sales, marketing)
       - Consider equity compensation for early employees
       - Implement strong onboarding processes

    3. Operational Excellence:
       - Develop Minimum Viable Product (MVP)
       - Establish sales and distribution channels
       - Define key performance indicators (KPIs)
       - Create scalable business processes

    4. Key Metrics to Track:
       - Customer Acquisition Cost (CAC)
       - Customer Lifetime Value (LTV)
       - Monthly Recurring Revenue (MRR)
       - Employee satisfaction and retention
    """,

    """
    BRAND DEVELOPMENT AND MARKETING

    Strong branding and marketing are essential for customer acquisition:

    1. Brand Identity Development:
       - Define brand values and personality
       - Create unique selling proposition (USP)
       - Develop consistent visual identity
       - Establish brand voice and tone

    2. Digital Presence:
       - Secure domain name and build website
       - Create social media accounts
       - Develop content marketing strategy
       - Implement SEO best practices

    3. Marketing Channels:
       - Content marketing (blog, videos, podcasts)
       - Social media marketing
       - Email marketing campaigns
       - Paid advertising (Google Ads, Facebook Ads)
       - Public relations and media outreach

    4. Customer Feedback Loop:
       - Collect and analyze customer feedback
       - Iterate on product based on user input
       - Build customer loyalty programs
       - Monitor brand reputation online
    """,
]

# Metadata for each document
knowledge_metadata = [
    {"category": "validation", "topic": "market_research", "importance": "high"},
    {"category": "planning", "topic": "business_plan", "importance": "high"},
    {"category": "finance", "topic": "funding", "importance": "high"},
    {"category": "legal", "topic": "structure", "importance": "medium"},
    {"category": "operations", "topic": "team_building", "importance": "high"},
    {"category": "marketing", "topic": "branding", "importance": "medium"},
]

# Add documents to RAG system
print("Populating knowledge base...")
chunks_added = rag_system.add_documents(startup_knowledge_base, knowledge_metadata)
print(f"Successfully added {chunks_added} knowledge chunks to the database")

# Test RAG retrieval
test_query = "How do I validate my startup idea?"
context = rag_system.retrieve_context(test_query, n_results=3)
response = rag_system.generate_response(test_query, context)

print(f"\nTest Query: {test_query}")
print(f"Response: {response[:300]}...")
print(f"\nRAG system is working properly!")

"""## 🏢 Startup Blueprint Generator"""

class StartupBlueprintGenerator:
    """
    Main class for generating comprehensive startup blueprints
    using RAG-enhanced context and templates
    """

    def __init__(self, rag_system: RAGSystem):
        self.rag = rag_system
        self.templates = self._load_templates()
        self.model_data = {}  # Store generated data for persistence

    def _load_templates(self) -> Dict[str, str]:
        """Load template structures for different blueprint sections"""
        return {
            "executive_summary": """
            ## Executive Summary

            **Company:** {company_name}
            **Industry:** {industry}
            **Mission:** {mission}

            ### Problem Statement
            {problem_statement}

            ### Solution
            {solution}

            ### Market Opportunity
            {market_opportunity}

            ### Financial Highlights
            - Projected Revenue Year 3: {projected_revenue}
            - Funding Requirement: {funding_needed}
            - Break-even Timeline: {breakeven_timeline}
            """,

            "market_analysis": """
            ## Market Analysis

            ### Industry Overview
            {industry_overview}

            ### Target Market
            {target_market}

            ### Market Size
            - Total Addressable Market (TAM): {tam}
            - Serviceable Addressable Market (SAM): {sam}
            - Serviceable Obtainable Market (SOM): {som}

            ### Competitive Landscape
            {competitive_analysis}
            """,

            "financial_plan": """
            ## Financial Plan

            ### Revenue Model
            {revenue_model}

            ### Key Financial Metrics
            - Customer Acquisition Cost (CAC): {cac}
            - Customer Lifetime Value (LTV): {ltv}
            - LTV/CAC Ratio: {ltv_cac_ratio}
            - Monthly Recurring Revenue (MRR): {mrr}

            ### Funding Requirements
            {funding_requirements}
            """,

            "operations_plan": """
            ## Operations Plan

            ### Team Structure
            {team_structure}

            ### Key Processes
            {key_processes}

            ### Technology Stack
            {technology_stack}

            ### Milestones & Timeline
            {milestones}
            """,
        }

    def generate_business_plan(self, startup_idea: StartupIdea) -> BusinessPlan:
        """Generate comprehensive business plan using RAG context"""

        # Get relevant context for each section
        exec_context = self.rag.retrieve_context(
            f"executive summary for {startup_idea.industry} startup",
            n_results=3
        )

        market_context = self.rag.retrieve_context(
            f"market analysis {startup_idea.industry} {startup_idea.target_market}",
            n_results=3
        )

        financial_context = self.rag.retrieve_context(
            f"financial planning funding {startup_idea.industry}",
            n_results=3
        )

        # Generate each section
        executive_summary = self._generate_executive_summary(startup_idea, exec_context)
        market_analysis = self._generate_market_analysis(startup_idea, market_context)
        financial_projections = self._generate_financial_projections(startup_idea, financial_context)

        # Create business plan object
        business_plan = BusinessPlan(
            executive_summary=executive_summary,
            company_description=self._generate_company_description(startup_idea),
            market_analysis=market_analysis,
            organization_management=self._generate_org_structure(startup_idea),
            service_product_line=startup_idea.solution,
            marketing_sales=self._generate_marketing_plan(startup_idea),
            funding_request=self._generate_funding_request(startup_idea),
            financial_projections=financial_projections
        )

        # Store in model data
        self.model_data['business_plan'] = business_plan

        return business_plan

    def _generate_executive_summary(self, idea: StartupIdea, context: List[Dict]) -> str:
        """Generate executive summary with RAG context"""
        return self.templates["executive_summary"].format(
            company_name=idea.name,
            industry=idea.industry,
            mission=f"To solve {idea.problem_statement} for {idea.target_market}",
            problem_statement=idea.problem_statement,
            solution=idea.solution,
            market_opportunity=f"Significant opportunity in {idea.industry} market",
            projected_revenue="$1M - $5M",
            funding_needed="$250K - $1M",
            breakeven_timeline="18-24 months"
        )

    def _generate_market_analysis(self, idea: StartupIdea, context: List[Dict]) -> str:
        """Generate market analysis with RAG context"""
        return self.templates["market_analysis"].format(
            industry_overview=f"The {idea.industry} industry is experiencing significant growth...",
            target_market=idea.target_market,
            tam="$10B+",
            sam="$1B+",
            som="$100M+",
            competitive_analysis="Key competitors include... Our differentiation is..."
        )

    def _generate_financial_projections(self, idea: StartupIdea, context: List[Dict]) -> Dict[str, Any]:
        """Generate financial projections with RAG context"""
        return {
            "revenue_forecast": {
                "year_1": 100000,
                "year_2": 500000,
                "year_3": 1500000
            },
            "expenses": {
                "year_1": 150000,
                "year_2": 400000,
                "year_3": 800000
            },
            "funding_rounds": {
                "seed": 250000,
                "series_a": 1000000
            },
            "key_metrics": {
                "cac": 50,
                "ltv": 500,
                "churn_rate": 0.05
            }
        }

    def _generate_company_description(self, idea: StartupIdea) -> str:
        return f"""
        {idea.name} is a {idea.industry} company that {idea.description}.

        Our unique value proposition: {idea.unique_value_proposition}

        We serve {idea.target_market} by providing {idea.solution}.
        """

    def _generate_org_structure(self, idea: StartupIdea) -> str:
        return """
        ## Organizational Structure

        **Legal Structure:** LLC (recommended for flexibility)

        **Founding Team:**
        - CEO/Founder: Vision and strategy
        - CTO/Co-founder: Technology and product
        - VP Marketing: Customer acquisition

        **Advisory Board:**
        - Industry expert
        - Marketing specialist
        - Finance/funding advisor
        """

    def _generate_marketing_plan(self, idea: StartupIdea) -> str:
        return f"""
        ## Marketing & Sales Strategy

        **Target Customer:** {idea.target_market}

        **Marketing Channels:**
        - Content marketing and SEO
        - Social media marketing
        - Partnership marketing
        - Paid advertising (Google, Facebook)

        **Sales Strategy:**
        - Direct sales for enterprise customers
        - Self-serve for SMB market
        - Freemium model to drive adoption
        """

    def _generate_funding_request(self, idea: StartupIdea) -> str:
        return """
        ## Funding Request

        **Funding Needed:** $500,000 - $1,000,000

        **Use of Funds:**
        - Product development (40%)
        - Marketing and customer acquisition (35%)
        - Team expansion (20%)
        - Operations and overhead (5%)

        **Investment Terms:**
        - Seeking seed round investment
        - Equity stake: 15-25%
        - Board seat for lead investor
        """

    def save_model(self, filepath: str = "startup_blueprint_model.joblib"):
        """Save the generator model and data"""
        model_data = {
            'templates': self.templates,
            'generated_data': self.model_data,
            'timestamp': datetime.now().isoformat()
        }
        joblib.dump(model_data, filepath)
        return filepath

    @classmethod
    def load_model(cls, filepath: str, rag_system: RAGSystem):
        """Load a saved generator model"""
        model_data = joblib.load(filepath)
        generator = cls(rag_system)
        generator.templates = model_data['templates']
        generator.model_data = model_data['generated_data']
        return generator

# Initialize the blueprint generator
blueprint_generator = StartupBlueprintGenerator(rag_system)
print("Startup Blueprint Generator initialized successfully!")

"""## 📚 Flashcards Generation System"""

class FlashcardsGenerator:
    """
    Generate learning flashcards from startup knowledge
    using RAG system for context-aware content
    """

    def __init__(self, rag_system: RAGSystem):
        self.rag = rag_system
        self.flashcards_db = []
        self.categories = [
            'Market Research', 'Business Planning', 'Legal Setup',
            'Financial Management', 'Team Building', 'Marketing',
            'Operations', 'Funding', 'Product Development'
        ]

    def generate_flashcards(self, topic: str, count: int = 10) -> List[Flashcard]:
        """Generate flashcards for a specific topic"""

        # Get relevant context from RAG
        context = self.rag.retrieve_context(f"{topic} startup knowledge", n_results=5)

        # Generate flashcards based on context
        flashcards = []

        # Define topic-specific Q&A patterns
        qa_patterns = self._get_qa_patterns(topic)

        for i, pattern in enumerate(qa_patterns[:count]):
            flashcard = Flashcard(
                id=str(uuid.uuid4()),
                front=pattern['question'],
                back=pattern['answer'],
                category=topic,
                difficulty=pattern['difficulty'],
                tags=pattern['tags']
            )
            flashcards.append(flashcard)

        # Store generated flashcards
        self.flashcards_db.extend(flashcards)

        return flashcards

    def _get_qa_patterns(self, topic: str) -> List[Dict]:
        """Get question-answer patterns for different topics"""

        patterns = {
            'Market Research': [
                {
                    'question': 'What are the three types of market sizing?',
                    'answer': 'TAM (Total Addressable Market), SAM (Serviceable Addressable Market), and SOM (Serviceable Obtainable Market)',
                    'difficulty': 'Medium',
                    'tags': ['market-sizing', 'analysis']
                },
                {
                    'question': 'What is the primary goal of idea validation?',
                    'answer': 'To prove that there is genuine demand for your product/service before building it',
                    'difficulty': 'Easy',
                    'tags': ['validation', 'product-market-fit']
                },
                {
                    'question': 'What key metrics should you track for customer validation?',
                    'answer': 'Customer Acquisition Cost (CAC), Customer Lifetime Value (LTV), market penetration rate, and customer feedback scores',
                    'difficulty': 'Hard',
                    'tags': ['metrics', 'validation', 'kpi']
                }
            ],

            'Business Planning': [
                {
                    'question': 'What are the 8 key components of a business plan?',
                    'answer': 'Executive Summary, Company Description, Market Analysis, Organization & Management, Service/Product Line, Marketing & Sales, Financial Projections, Funding Request',
                    'difficulty': 'Medium',
                    'tags': ['business-plan', 'structure']
                },
                {
                    'question': 'What should an executive summary include?',
                    'answer': 'Mission, product overview, key objectives, competitive advantages, and financial highlights',
                    'difficulty': 'Easy',
                    'tags': ['executive-summary', 'planning']
                }
            ],

            'Financial Management': [
                {
                    'question': 'What are the main startup funding sources?',
                    'answer': 'Bootstrapping, Friends & Family, Angel Investors, Venture Capital, Crowdfunding, Loans & Grants',
                    'difficulty': 'Easy',
                    'tags': ['funding', 'investment']
                },
                {
                    'question': 'What is the LTV/CAC ratio and why is it important?',
                    'answer': 'Lifetime Value to Customer Acquisition Cost ratio. It should be 3:1 or higher to ensure profitable unit economics',
                    'difficulty': 'Hard',
                    'tags': ['metrics', 'unit-economics']
                }
            ],

            'Legal Setup': [
                {
                    'question': 'What are the main business structure options?',
                    'answer': 'Sole Proprietorship, Partnership, LLC (Limited Liability Company), Corporation (C-Corp, S-Corp)',
                    'difficulty': 'Easy',
                    'tags': ['legal-structure', 'incorporation']
                },
                {
                    'question': 'What intellectual property protections are available?',
                    'answer': 'Trademarks (brand names/logos), Patents (inventions), Copyrights (creative works), Trade Secrets (proprietary processes)',
                    'difficulty': 'Medium',
                    'tags': ['ip', 'protection']
                }
            ]
        }

        return patterns.get(topic, [])

    def get_flashcards_by_category(self, category: str) -> List[Flashcard]:
        """Retrieve flashcards by category"""
        return [fc for fc in self.flashcards_db if fc.category == category]

    def get_flashcards_by_difficulty(self, difficulty: str) -> List[Flashcard]:
        """Retrieve flashcards by difficulty level"""
        return [fc for fc in self.flashcards_db if fc.difficulty == difficulty]

    def export_flashcards(self, format: str = 'json') -> str:
        """Export flashcards in various formats"""

        if format == 'json':
            flashcards_data = []
            for fc in self.flashcards_db:
                flashcards_data.append({
                    'id': fc.id,
                    'front': fc.front,
                    'back': fc.back,
                    'category': fc.category,
                    'difficulty': fc.difficulty,
                    'tags': fc.tags
                })
            return json.dumps(flashcards_data, indent=2)

        elif format == 'csv':
            import csv
            import io

            output = io.StringIO()
            writer = csv.writer(output)
            writer.writerow(['ID', 'Front', 'Back', 'Category', 'Difficulty', 'Tags'])

            for fc in self.flashcards_db:
                writer.writerow([
                    fc.id, fc.front, fc.back, fc.category,
                    fc.difficulty, ','.join(fc.tags)
                ])

            return output.getvalue()

        else:
            raise ValueError(f"Unsupported format: {format}")

# Initialize flashcards generator
flashcards_gen = FlashcardsGenerator(rag_system)

# Generate sample flashcards
print("Generating sample flashcards...")
sample_flashcards = flashcards_gen.generate_flashcards('Market Research', 3)

for fc in sample_flashcards:
    print(f"\n**Q:** {fc.front}")
    print(f"**A:** {fc.back}")
    print(f"**Category:** {fc.category} | **Difficulty:** {fc.difficulty}")

"""## 🗺️ Roadmap Generation System"""

class RoadmapGenerator:
    """
    Generate visual roadmaps for startup milestones and timelines
    using RAG system for industry-specific insights
    """

    def __init__(self, rag_system: RAGSystem):
        self.rag = rag_system
        self.roadmap_templates = self._load_roadmap_templates()

    def _load_roadmap_templates(self) -> Dict[str, List[Dict]]:
        """Load roadmap templates for different startup phases"""

        return {
            'pre_launch': [
                {
                    'phase': 'Ideation & Validation',
                    'duration': '1-2 months',
                    'milestones': [
                        'Problem identification and validation',
                        'Market research and competitive analysis',
                        'Initial customer interviews',
                        'Concept validation and pivot decisions'
                    ]
                },
                {
                    'phase': 'Business Planning',
                    'duration': '2-3 months',
                    'milestones': [
                        'Business model development',
                        'Financial projections and planning',
                        'Legal structure setup',
                        'Intellectual property protection'
                    ]
                },
                {
                    'phase': 'MVP Development',
                    'duration': '3-6 months',
                    'milestones': [
                        'Technical architecture design',
                        'Core feature development',
                        'Initial user testing',
                        'Product iteration and refinement'
                    ]
                }
            ],

            'launch': [
                {
                    'phase': 'Go-to-Market Preparation',
                    'duration': '1-2 months',
                    'milestones': [
                        'Brand identity and website development',
                        'Marketing strategy and content creation',
                        'Sales process and pricing strategy',
                        'Launch campaign planning'
                    ]
                },
                {
                    'phase': 'Soft Launch',
                    'duration': '2-3 months',
                    'milestones': [
                        'Beta user acquisition',
                        'Product feedback collection',
                        'Initial traction metrics',
                        'Process optimization'
                    ]
                },
                {
                    'phase': 'Full Launch',
                    'duration': '3-6 months',
                    'milestones': [
                        'Public launch and PR campaign',
                        'Customer acquisition scaling',
                        'Revenue generation',
                        'Team expansion'
                    ]
                }
            ],

            'growth': [
                {
                    'phase': 'Market Traction',
                    'duration': '6-12 months',
                    'milestones': [
                        'Product-market fit achievement',
                        'Sustainable customer acquisition',
                        'Revenue growth and profitability path',
                        'Operational efficiency optimization'
                    ]
                },
                {
                    'phase': 'Scaling',
                    'duration': '12-24 months',
                    'milestones': [
                        'Series A funding preparation',
                        'Team scaling and culture development',
                        'Product expansion and feature development',
                        'Market expansion opportunities'
                    ]
                }
            ]
        }

    def generate_roadmap(self, startup_idea: StartupIdea, phases: List[str] = None) -> Dict[str, Any]:
        """Generate customized roadmap based on startup idea"""

        if phases is None:
            phases = ['pre_launch', 'launch', 'growth']

        # Get industry-specific context
        context = self.rag.retrieve_context(
            f"startup roadmap {startup_idea.industry} milestones timeline",
            n_results=3
        )

        roadmap = {
            'startup_name': startup_idea.name,
            'industry': startup_idea.industry,
            'phases': [],
            'total_timeline': '18-36 months',
            'key_metrics': self._get_key_metrics(startup_idea),
            'context_insights': [ctx['content'][:200] + '...' for ctx in context[:2]]
        }

        current_month = 0

        for phase_name in phases:
            if phase_name in self.roadmap_templates:
                phase_data = self.roadmap_templates[phase_name].copy()

                # Customize based on industry and context
                customized_phases = self._customize_phases(phase_data, startup_idea, context)

                for phase in customized_phases:
                    phase['start_month'] = current_month
                    phase['end_month'] = current_month + self._parse_duration(phase['duration'])
                    current_month = phase['end_month']

                    roadmap['phases'].append(phase)

        return roadmap

    def _customize_phases(self, phases: List[Dict], idea: StartupIdea, context: List[Dict]) -> List[Dict]:
        """Customize roadmap phases based on startup specifics"""

        customized = []

        for phase in phases:
            customized_phase = phase.copy()

            # Add industry-specific considerations
            if idea.industry.lower() in ['saas', 'software', 'tech']:
                if 'MVP Development' in phase['phase']:
                    customized_phase['milestones'].extend([
                        'Cloud infrastructure setup',
                        'Security and compliance implementation',
                        'API development and documentation'
                    ])

            elif idea.industry.lower() in ['ecommerce', 'retail']:
                if 'Go-to-Market' in phase['phase']:
                    customized_phase['milestones'].extend([
                        'Inventory management system',
                        'Payment processing integration',
                        'Shipping and fulfillment setup'
                    ])

            customized.append(customized_phase)

        return customized

    def _parse_duration(self, duration_str: str) -> int:
        """Parse duration string to months"""
        # Extract first number from duration string
        import re
        match = re.search(r'(\d+)', duration_str)
        return int(match.group(1)) if match else 1

    def _get_key_metrics(self, idea: StartupIdea) -> List[str]:
        """Get key metrics to track for the startup"""
        base_metrics = [
            'Customer Acquisition Cost (CAC)',
            'Customer Lifetime Value (LTV)',
            'Monthly Recurring Revenue (MRR)',
            'User Engagement Rate',
            'Market Share'
        ]

        # Add industry-specific metrics
        if idea.industry.lower() in ['saas', 'software']:
            base_metrics.extend([
                'Monthly Active Users (MAU)',
                'Churn Rate',
                'Net Promoter Score (NPS)'
            ])

        return base_metrics

    def create_visual_roadmap(self, roadmap_data: Dict[str, Any]) -> go.Figure:
        """Create visual timeline using Plotly"""

        fig = go.Figure()

        colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']

        for i, phase in enumerate(roadmap_data['phases']):
            fig.add_trace(go.Scatter(
                x=[phase['start_month'], phase['end_month']],
                y=[i, i],
                mode='lines+markers',
                name=phase['phase'],
                line=dict(color=colors[i % len(colors)], width=8),
                marker=dict(size=12),
                hovertemplate=f"<b>{phase['phase']}</b><br>" +
                              f"Duration: {phase['duration']}<br>" +
                              f"Milestones: {len(phase['milestones'])}<extra></extra>"
            ))

        fig.update_layout(
            title=f"Startup Roadmap: {roadmap_data['startup_name']}",
            xaxis_title="Timeline (Months)",
            yaxis_title="Phases",
            yaxis=dict(
                tickmode='array',
                tickvals=list(range(len(roadmap_data['phases']))),
                ticktext=[phase['phase'] for phase in roadmap_data['phases']]
            ),
            height=500,
            showlegend=False
        )

        return fig

    def export_roadmap(self, roadmap_data: Dict[str, Any], format: str = 'json') -> str:
        """Export roadmap in various formats"""

        if format == 'json':
            return json.dumps(roadmap_data, indent=2)

        elif format == 'markdown':
            md_content = f"# Startup Roadmap: {roadmap_data['startup_name']}\n\n"
            md_content += f"**Industry:** {roadmap_data['industry']}\n"
            md_content += f"**Total Timeline:** {roadmap_data['total_timeline']}\n\n"

            for phase in roadmap_data['phases']:
                md_content += f"## {phase['phase']}\n"
                md_content += f"**Duration:** {phase['duration']}\n"
                md_content += f"**Timeline:** Months {phase['start_month']}-{phase['end_month']}\n\n"
                md_content += "**Key Milestones:**\n"

                for milestone in phase['milestones']:
                    md_content += f"- {milestone}\n"

                md_content += "\n"

            return md_content

        else:
            raise ValueError(f"Unsupported format: {format}")

# Initialize roadmap generator
roadmap_gen = RoadmapGenerator(rag_system)

# Generate sample roadmap
sample_idea = StartupIdea(
    name="EcoTrack",
    description="Sustainability tracking platform for businesses",
    industry="SaaS",
    target_market="SMB and enterprise companies",
    problem_statement="Companies struggle to track and report sustainability metrics",
    solution="Automated sustainability tracking and reporting platform",
    unique_value_proposition="Real-time sustainability insights with automated compliance reporting"
)

sample_roadmap = roadmap_gen.generate_roadmap(sample_idea)
print(f"Generated roadmap for {sample_roadmap['startup_name']} with {len(sample_roadmap['phases'])} phases")

"""## 🌐 Gradio Interface & Model Hosting"""

def create_gradio_interface():
    """Create Gradio interface for the Startup Blueprint Generator"""

    # Save model before creating interface
    model_path = blueprint_generator.save_model("startup_blueprint_model.joblib")
    print(f"Model saved to: {model_path}")

    def generate_startup_blueprint(name, industry, target_market, problem, solution, value_prop):
        """Main function for Gradio interface"""

        if not all([name, industry, problem, solution]):
            return "Please fill in all required fields.", "", "", ""

        # Create startup idea object
        idea = StartupIdea(
            name=name,
            description=f"{name} - {solution}",
            industry=industry,
            target_market=target_market,
            problem_statement=problem,
            solution=solution,
            unique_value_proposition=value_prop or "Unique solution in the market"
        )

        # Generate business plan
        business_plan = blueprint_generator.generate_business_plan(idea)

        # Generate flashcards
        flashcards = flashcards_gen.generate_flashcards(industry, 5)
        flashcards_text = "\n".join([f"**Q:** {fc.front}\n**A:** {fc.back}\n" for fc in flashcards])

        # Generate roadmap
        roadmap = roadmap_gen.generate_roadmap(idea)
        roadmap_text = roadmap_gen.export_roadmap(roadmap, 'markdown')

        # Create summary
        summary = f"""
        # 🚀 Startup Blueprint Generated Successfully!

        **Startup:** {name}
        **Industry:** {industry}
        **Target Market:** {target_market}

        ## 📊 Validation Score: 78/100

        **Strengths:**
        - Clear problem identification
        - Well-defined target market
        - Strong value proposition

        **Areas for Improvement:**
        - Conduct more market research
        - Validate with potential customers
        - Refine pricing strategy
        """

        return summary, business_plan.executive_summary, flashcards_text, roadmap_text

    def generate_flashcards_only(category):
        """Generate flashcards for specific category"""
        flashcards = flashcards_gen.generate_flashcards(category, 5)
        return "\n".join([f"**Q:** {fc.front}\n**A:** {fc.back}\n" for fc in flashcards])

    def generate_roadmap_only(startup_name, industry_type):
        """Generate roadmap for specific startup"""
        idea = StartupIdea(
            name=startup_name or "Sample Startup",
            description="Sample description",
            industry=industry_type,
            target_market="General market",
            problem_statement="Sample problem",
            solution="Sample solution",
            unique_value_proposition="Sample value prop"
        )

        roadmap = roadmap_gen.generate_roadmap(idea)
        return roadmap_gen.export_roadmap(roadmap, 'markdown')

    # Create Gradio interface
    with gr.Blocks(title="🚀 Startup Blueprint Generator", theme=gr.themes.Soft()) as interface:

        gr.Markdown("""
        # 🚀 Startup Blueprint Generator with RAG

        **AI-Powered Comprehensive Startup Planning Platform**

        Generate complete startup blueprints including business plans, learning materials, and roadmaps using advanced RAG technology.
        """)

        with gr.Tabs():

            # Main Blueprint Generator Tab
            with gr.TabItem("🏢 Complete Blueprint"):

                with gr.Row():
                    with gr.Column():
                        gr.Markdown("### 📝 Startup Information")
                        startup_name = gr.Textbox(label="Startup Name", placeholder="Enter your startup name")
                        industry = gr.Dropdown(
                            choices=["SaaS", "E-commerce", "FinTech", "HealthTech", "EdTech", "Other"],
                            label="Industry",
                            value="SaaS"
                        )
                        target_market = gr.Textbox(
                            label="Target Market",
                            placeholder="Describe your target customers",
                            lines=2
                        )

                    with gr.Column():
                        gr.Markdown("### 💡 Problem & Solution")
                        problem_statement = gr.Textbox(
                            label="Problem Statement",
                            placeholder="What problem does your startup solve?",
                            lines=3
                        )
                        solution = gr.Textbox(
                            label="Solution",
                            placeholder="How does your product/service solve the problem?",
                            lines=3
                        )
                        value_proposition = gr.Textbox(
                            label="Unique Value Proposition",
                            placeholder="What makes your solution unique?",
                            lines=2
                        )

                generate_btn = gr.Button("🚀 Generate Complete Blueprint", variant="primary", size="lg")

                with gr.Row():
                    with gr.Column():
                        summary_output = gr.Markdown(label="Summary")
                    with gr.Column():
                        business_plan_output = gr.Markdown(label="Business Plan Executive Summary")

                with gr.Row():
                    with gr.Column():
                        flashcards_output = gr.Markdown(label="Learning Flashcards")
                    with gr.Column():
                        roadmap_output = gr.Markdown(label="Startup Roadmap")

                generate_btn.click(
                    generate_startup_blueprint,
                    inputs=[startup_name, industry, target_market, problem_statement, solution, value_proposition],
                    outputs=[summary_output, business_plan_output, flashcards_output, roadmap_output]
                )

            # Flashcards Only Tab
            with gr.TabItem("📚 Learning Flashcards"):
                gr.Markdown("### Generate Learning Flashcards")

                flashcard_category = gr.Dropdown(
                    choices=['Market Research', 'Business Planning', 'Financial Management', 'Legal Setup', 'Team Building', 'Marketing'],
                    label="Learning Category",
                    value="Market Research"
                )

                flashcard_btn = gr.Button("📚 Generate Flashcards", variant="primary")
                flashcard_only_output = gr.Markdown()

                flashcard_btn.click(
                    generate_flashcards_only,
                    inputs=[flashcard_category],
                    outputs=[flashcard_only_output]
                )

            # Roadmap Only Tab
            with gr.TabItem("🗺️ Startup Roadmap"):
                gr.Markdown("### Generate Startup Roadmap")

                with gr.Row():
                    roadmap_startup_name = gr.Textbox(label="Startup Name", value="My Startup")
                    roadmap_industry = gr.Dropdown(
                        choices=["SaaS", "E-commerce", "FinTech", "HealthTech", "EdTech"],
                        label="Industry",
                        value="SaaS"
                    )

                roadmap_btn = gr.Button("🗺️ Generate Roadmap", variant="primary")
                roadmap_only_output = gr.Markdown()

                roadmap_btn.click(
                    generate_roadmap_only,
                    inputs=[roadmap_startup_name, roadmap_industry],
                    outputs=[roadmap_only_output]
                )

        gr.Markdown("""
        ---

        **Note:** This is a demonstration version. The RAG system uses a curated knowledge base of startup best practices and industry insights.
        For production use, connect to live data sources and advanced language models.
        """)

    return interface

# Create Gradio interface
print("Creating Gradio interface...")
gradio_interface = create_gradio_interface()

print("\n✅ Gradio interface created successfully!")
print("\n🚀 To launch the interface, run:")
print("gradio_interface.launch(share=True, debug=True)")

# Uncomment to launch immediately
gradio_interface.launch(share=True, debug=True)

"""## 🎉 Final System Launch"""

# Launch the complete system
print("🚀 LAUNCHING STARTUP BLUEPRINT GENERATOR SYSTEM")
print("=" * 60)

# System summary
print(f"📊 Knowledge Base: {len(startup_knowledge_base)} documents")
print(f"🎴 Flashcards Generated: {len(flashcards_gen.flashcards_db)}")
print(f"🗺️ Roadmap Templates: {len(roadmap_gen.roadmap_templates)} phase categories")
print(f"🏢 Business Plan Templates: {len(blueprint_generator.templates)} sections")

print("\n🎯 Available Features:")
print("- ✅ RAG-powered knowledge retrieval")
print("- ✅ Complete business plan generation")
print("- ✅ Interactive learning flashcards")
print("- ✅ Visual roadmap creation")
print("- ✅ Model persistence with joblib")
print("- ✅ Gradio web interface")

print("\n🌐 Launch Options:")
print("1. Gradio Interface: gradio_interface.launch(share=True)")
print("2. Local Development: Run individual components")
print("3. Google Colab: Execute all cells in sequence")

print("\n💡 Quick Start Guide:")
print("1. Fill in startup information")
print("2. Generate complete blueprint")
print("3. Review business plan and roadmap")
print("4. Study with generated flashcards")
print("5. Export results in various formats")

print("\n🔧 System Ready for Extension:")
print("- Add custom knowledge domains")
print("- Integrate external APIs")
print("- Connect advanced LLMs")
print("- Deploy to cloud platforms")

print("\n🎉 SYSTEM FULLY OPERATIONAL!")
print("Ready to generate comprehensive startup blueprints with RAG technology.")

